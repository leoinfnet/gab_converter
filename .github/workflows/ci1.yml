name: Hello World Actions
on: [push]
jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout do código
        uses: actions/checkout@v4

      - name: Mostrar infos do build
        run: |
          echo "Branch: $GITHUB_REF_NAME"
          echo "Commit: $GITHUB_SHA"
          pwd

      - name: Listar arquivos do repo
        run: |
          ls -la
          ls -la conversor || true
          ls -la tests || true

      - name: Cache do pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Verificar instalação
        run: pip list
      - name: Instalar pytest
        run: pip install pytest

      - name: Rodar testes
        id: run_pytest
        continue-on-error: true
        env:
          PYTHONPATH: .
        run: pytest -q --junit-xml=pytest-report.xml


      - name: Upload do relatório JUnit (se falhou)
        if: ${{ steps.run_pytest.outcome == 'failure' }}
        uses: actions/upload-artifact@v4
        with:
          name: pytest-report
          path: pytest-report.xml

          retention-days: 2

      - name: PyTest com cobertura
        env:
          PYTHONPATH: .
        run: |
          pytest -q --disable-warnings \
                 --cov=conversor/core.py\
                 --cov-report=term-missing \
                 --cov-report=xml \
                 --cov-fail-under=10

      - name: Gerar badge SVG da cobertura
        run: |
          # gera ./coverage.svg a partir do coverage.xml
          coverage-badge -o coverage.svg -f
      
      
      - name: Upload dos artefatos (badge + xml)
        uses: actions/upload-artifact@v4
        with:
          name: coverage-artifacts
          path: |
            coverage.xml
            coverage.svg
          retention-days: 7
      
      

      - name: Criar Issue se falhar (somente em push)
        if: ${{ steps.run_pytest.outcome == 'failure' && github.event_name == 'push' }}
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const sha7 = context.sha.substring(0,7);
            const title = `❌ Testes falharam em ${context.ref} @ ${sha7}`;
            const runUrl = `${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`;

            const body = [
              `**Workflow:** ${process.env.GITHUB_WORKFLOW}`,
              `**Run:** ${runUrl}`,
              `**Branch/Tag:** ${context.ref}`,
              `**Commit:** ${context.sha}`,
              '',
              'Baixe o artifact **pytest-report** (retenção: 2 dias) para ver o JUnit.',
              '',
              'Gerado automaticamente pelo CI.'
            ].join('\n');

            const labels = ['ci','tests','falha'];

            // Evita duplicar Issue para o mesmo commit (procura por label + sha no título)
            const { data: openIssues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', per_page: 100, labels: labels.join(',')
            });
            if (openIssues.some(i => i.title.includes(sha7))) {
              core.info('Issue já existe para este commit. Pulando criação.');
            } else {
              // Tenta garantir que as labels existam (ignora erro se já existirem)
              for (const name of labels) {
                try { await github.rest.issues.createLabel({ owner, repo, name, color: 'ededed' }); } catch {}
              }
              await github.rest.issues.create({ owner, repo, title, body, labels });
              core.info('Issue criada com sucesso.');
            }

      - name: Marcar job como falho
        if: ${{ steps.run_pytest.outcome == 'failure' }}
        run: exit 1
